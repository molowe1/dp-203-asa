{
	"name": "03-azuredatalakeload",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "50a9eec2-8637-4c34-a6c7-7665130e4af2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/976a6163-6cea-4dff-9b57-f63c294f349e/resourceGroups/dp-203-demo/providers/Microsoft.Synapse/workspaces/dwhsection4/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://dwhsection4.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Lab - Spark Pool - Load data\n",
					"# Lab - Spark Pool - Grouping your results\n",
					"\n",
					"# When it comes to accessing Azure Data Lake , we are going to use the abfs protocol\n",
					"# This is the Azure Blob File System driver that is also part of Apache Hadoop\n",
					"# structure of the URI - abfs[s]://file_system@account_name.dfs.core.windows.net/<path>/<path>/<file_name>\n",
					"# https://datalakedemodp203.blob.core.windows.net/parquet/Log.parquet\n",
					"\n",
					"# spark.read is a method that can be used to read data from various file formats - Parquet,Avro etc\n",
					"df = spark.read.load('abfss://parquet@datalakedemodp203.dfs.core.windows.net/Log.parquet', format='parquet')\n",
					"display(df)\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Only projecting certain columns\n",
					"from pyspark.sql.functions import col\n",
					"newdf=df.select(col(\"Correlationid\"),col(\"Operationname\"),col(\"Resourcegroup\"))\n",
					"display(newdf)\n",
					"\n",
					"# Show rows where Resource Group is NULL\n",
					"from pyspark.sql.functions import col\n",
					"nulldf=df.filter(col(\"ResourceGroup\").isNull())\n",
					"display(nulldf)\n",
					"\n",
					"# Displaying the count of rows\n",
					"# Using f allows for formatted string literals\n",
					"rows=nulldf.count()\n",
					"print(f\"The number of rows : {rows}\")\n",
					"\n",
					"# Using group by\n",
					"summaryRows=df.groupBy(\"ResourceGroup\").count()\n",
					"display(summaryRows)\n",
					""
				],
				"execution_count": null
			}
		]
	}
}